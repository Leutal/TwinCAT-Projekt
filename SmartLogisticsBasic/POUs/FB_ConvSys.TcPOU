<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ConvSys" Id="{8235fbcc-99f3-4e93-85a5-6d95fab18df5}" SpecialFunc="None">
    <Declaration><![CDATA[// Bandrundlauf-Controller
// Kontrolliert den Bandrundlauf, ist eigentlich der Hauptbaustein(deshalb wird direkt auf PLC-Variablen zugegriffen(ohne Schnittstellenübergabe)
FUNCTION_BLOCK FB_ConvSys
VAR
    vsFB_ConvPurple : FB_Conveyor;
    vsFB_ConvOrange : FB_Conveyor;
    vsFB_ConvYellow : FB_Conveyor;
    vsFB_ConvBlue : FB_Conveyor;
	vsFB_CounterR: CTU := (PV:=0);
	FB_MyUpCounterL: FB_MyUpCounter;
END_VAR
VAR_TEMP
	vti_CountValueL: INT;
END_VAR
VAR_STAT
	vsi_Step: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Abbruch des Schrittkettenmodus
	IF GVL_SimitSp.Ix_Reset THEN
		vsi_Step:=000;
	END_IF

CASE vsi_Step OF
	000: 	//Init-Modus
		GVL_SimitSp.Qx_MotorAcwPurple	:= FALSE;
		GVL_SimitSp.Qx_MotorCwPurple	:= FALSE;
		GVL_SimitSp.Qx_FullSpeedPurple	:= FALSE;
		GVL_SimitSp.Qx_MotorAcwOrange	:= FALSE;
		GVL_SimitSp.Qx_MotorCwOrange	:= FALSE;
		GVL_SimitSp.Qx_FullSpeedOrange	:= FALSE;
		GVL_SimitSp.Qx_MotorAcwYellow	:= FALSE;
		GVL_SimitSp.Qx_MotorCwYellow	:= FALSE;
		GVL_SimitSp.Qx_FullSpeedYellow	:= FALSE;
		GVL_SimitSp.Qx_MotorAcwBlue		:= FALSE;
		GVL_SimitSp.Qx_MotorCwBlue		:= FALSE;
		GVL_SimitSp.Qx_FullSpeedBlue	:= FALSE;
		GVL_SimitSp.Qx_LightGreen		:= FALSE;
		
		vsi_Step:=010;
		
	010: //Normalmodus
		vsFB_ConvPurple.vix_Left	:= GVL_SimitSp.Ix_Left;
		vsFB_ConvPurple.vix_Right	:= GVL_SimitSp.Ix_Right;
		vsFB_ConvOrange.vix_Left	:= GVL_SimitSp.Ix_Left;
		vsFB_ConvOrange.vix_Right	:= GVL_SimitSp.Ix_Right;
		vsFB_ConvYellow.vix_Left	:= GVL_SimitSp.Ix_Left;
		vsFB_ConvYellow.vix_Right	:= GVL_SimitSp.Ix_Right;
		vsFB_ConvBlue.vix_Left		:= GVL_SimitSp.Ix_Left;
		vsFB_ConvBlue.vix_Right		:= GVL_SimitSp.Ix_Right;
	
	IF 	GVL_SimitSp.Ix_Enable THEN
		GVL_SimitSp.Qx_LightGreen := TRUE;
		
	vsi_Step := 90;
	END_IF
	
	090: //Init von Schrittkettenmodus                                                                                    
		vsFB_ConvPurple.vix_Left	:= FALSE;                                                                              
		vsFB_ConvPurple.vix_Right	:= TRUE;                                                                              
		vsFB_ConvOrange.vix_Left	:= FALSE;                                                                              
		vsFB_ConvOrange.vix_Right	:= TRUE;                                                                              
		vsFB_ConvYellow.vix_Left	:= FALSE;                                                                              
		vsFB_ConvYellow.vix_Right	:= TRUE;                                                                              
		vsFB_ConvBlue.vix_Left		:= FALSE;                                                                              
		vsFB_ConvBlue.vix_Right		:= TRUE;                                                                             
		
	vsi_Step:=100;		//Bedingungslos in den nächsten Schritt schalten
	
	100: //Start Schrittketten-Ablauf
	IF GVL_SimitSp.Ix_RSensorPurple THEN
		vsFB_ConvPurple.vix_Left	:=TRUE;
		vsFB_ConvPurple.vix_Right	:=FALSE;
		
		vsi_Step:=110;
	END_IF;

	110:
	IF GVL_SimitSp.Ix_LSensorPurple THEN
		vsFB_ConvPurple.vix_Left	:=FALSE;
		vsFB_ConvPurple.vix_Right	:=TRUE;	
		vsFB_ConvOrange.vix_Left	:=FALSE;
		vsFB_ConvOrange.vix_Right	:=TRUE;	
		
		vsi_Step:=120;
	END_IF	
	
	120:
	IF GVL_SimitSp.Ix_RSensorOrange THEN
		vsFB_ConvOrange.vix_Left	:=TRUE;
		vsFB_ConvOrange.vix_Right	:=FALSE;
		
		vsi_Step:=130;
		END_IF
		
	130:
	IF GVL_SimitSp.Ix_LSensorOrange THEN
		vsFB_ConvOrange.vix_Left	:=FALSE;
		vsFB_ConvOrange.vix_Right	:=TRUE;
		vsFB_ConvYellow.vix_Left	:=FALSE;
		vsFB_ConvYellow.vix_Right	:=TRUE;
		
		vsi_Step:=140;
		END_IF
	
	140:
	IF GVL_SimitSp.Ix_RSensorYellow THEN
		vsFB_ConvYellow.vix_Left	:=TRUE;
		vsFB_ConvYellow.vix_Right	:=FALSE;
		
		vsi_Step:= 150;
		END_IF
		
	150:
	IF GVL_SimitSp.Ix_LSensorYellow THEN
		vsFB_ConvYellow.vix_Left	:=FALSE;
		vsFB_ConvYellow.vix_Right	:=TRUE;
		vsFB_ConvBlue.vix_Left	:=FALSE;
		vsFB_ConvBlue.vix_Right	:=TRUE;
		
		vsi_Step:= 160;
		END_IF
		
	160:
	IF GVL_SimitSp.Ix_RSensorBlue THEN
		vsFB_ConvBlue.vix_Left	:=TRUE;
		vsFB_ConvBlue.vix_Right	:=FALSE;
		
		vsi_Step:=170;
		END_IF
		
	170:
	IF GVL_SimitSp.Ix_LSensorBlue THEN
		vsFB_ConvBlue.vix_Left	:=FALSE;
		vsFB_ConvBlue.vix_Right	:=TRUE;
		vsFB_ConvPurple.vix_Left	:=FALSE;
		vsFB_ConvPurple.vix_Right	:=TRUE;
		
		vsi_Step:= 100;
		END_IF
				
	ELSE 							//ELSE von CASE
		vsi_Step :=000; 			//INIT
END_CASE;

(*Multiinstanzaufruf von Band lila*)
vsFB_ConvPurple(vix_Power := GVL_SimitSp.Ix_PowerOn,
                vix_On := GVL_SimitSp.Ix_On,
                vix_Off := GVL_SimitSp.Ix_Off,
//                 vix_Left := GVL_SimitSp.Ix_Left,
//                 vix_Right := GVL_SimitSp.Ix_Right,
                vix_ManAuto := GVL_SimitSp.Ix_ManAuto,                             
                viw_Speed := GVL_SimitSp.Iw_SliderValue,
                vqx_MotorCw => GVL_SimitSp.Qx_MotorCwPurple,
                vqx_MotorAcw => GVL_SimitSp.Qx_MotorAcwPurple,              
                vqx_VarSpeed => GVL_SimitSp.Qx_EnableVarSpeedPurple,
                vqw_Speed => GVL_SimitSp.Qw_VarSpeedPurple);
(*Multiinstanzaufruf von Band orange*)
vsFB_ConvOrange(vix_Power := GVL_SimitSp.Ix_PowerOn,
                vix_On := GVL_SimitSp.Ix_On,
                vix_Off := GVL_SimitSp.Ix_Off,
//                 vix_Left := GVL_SimitSp.Ix_Left,
//                 vix_Right := GVL_SimitSp.Ix_Right,
                vix_ManAuto := GVL_SimitSp.Ix_ManAuto,                              
                viw_Speed := GVL_SimitSp.Iw_SliderValue,
                vqx_MotorCw => GVL_SimitSp.Qx_MotorCwOrange,
                vqx_MotorAcw => GVL_SimitSp.Qx_MotorAcwOrange,               
                vqx_VarSpeed => GVL_SimitSp.Qx_EnableVarSpeedOrange,
                vqw_Speed => GVL_SimitSp.Qw_VarSpeedOrange);
(*Multiinstanzaufruf von Band yellow*)
vsFB_ConvYellow(vix_Power := GVL_SimitSp.Ix_PowerOn,
                vix_On := GVL_SimitSp.Ix_On,
                vix_Off := GVL_SimitSp.Ix_Off,
//                 vix_Left := GVL_SimitSp.Ix_Left,
//                 vix_Right := GVL_SimitSp.Ix_Right,
                vix_ManAuto := GVL_SimitSp.Ix_ManAuto,                              
                viw_Speed := GVL_SimitSp.Iw_SliderValue,
                vqx_MotorCw => GVL_SimitSp.Qx_MotorCwYellow,
                vqx_MotorAcw => GVL_SimitSp.Qx_MotorAcwYellow,               
                vqx_VarSpeed => GVL_SimitSp.Qx_EnableVarSpeedYellow,
                vqw_Speed => GVL_SimitSp.Qw_VarSpeedYellow);
(*Multiinstanzaufruf von Band blue*)
vsFB_ConvBlue(vix_Power := GVL_SimitSp.Ix_PowerOn,
                vix_On := GVL_SimitSp.Ix_On,
                vix_Off := GVL_SimitSp.Ix_Off,
//                 vix_Left := GVL_SimitSp.Ix_Left,
//                 vix_Right := GVL_SimitSp.Ix_Right,
                vix_ManAuto := GVL_SimitSp.Ix_ManAuto,               
                viw_Speed := GVL_SimitSp.Iw_SliderValue,
                vqx_MotorCw => GVL_SimitSp.Qx_MotorCwBlue,
                vqx_MotorAcw => GVL_SimitSp.Qx_MotorAcwBlue,               
                vqx_VarSpeed => GVL_SimitSp.Qx_EnableVarSpeedBlue,
                vqw_Speed => GVL_SimitSp.Qw_VarSpeedBlue); 

(*Rundlauf Anzeigen*)
GVL_SimitSp.Qx_LightBlue := GVL_SimitSp.Qx_MotorAcwBlue;  (*Gegenuhrzeigersinn Kontrolleuchte*)
GVL_SimitSp.Qx_LightYellow := GVL_SimitSp.Qx_MotorCwBlue; (*Uhrzeigersinn Kontrolleuchte*)
GVL_SimitSp.Qw_Display := GVL_SimitSp.Qw_VarSpeedPurple;  (*aktuelle variable Geschwindigkeit*)

(*Eilgang auf Enable Taster*)
GVL_SimitSp.Qx_FullSpeedPurple := GVL_SimitSp.Ix_Enable;
GVL_SimitSp.Qx_FullSpeedOrange := GVL_SimitSp.Ix_Enable;
GVL_SimitSp.Qx_FullSpeedYellow := GVL_SimitSp.Ix_Enable;
GVL_SimitSp.Qx_FullSpeedBlue := GVL_SimitSp.Ix_Enable; 

//Rundenzähler Rechtslauf
vsFB_CounterR(CU:= GVL_SimitSp.Ix_RSensorPurple AND GVL_SimitSp.Qx_MotorAcwPurple);
GVL_SimitSp.Qb_75 := WORD_TO_BYTE(vsFB_CounterR.CV);

//Rundenzähler Linkslauf
FB_MyUpCounterL(CU:= GVL_SimitSp.Ix_LSensorPurple AND GVL_SimitSp.Qx_MotorCwPurple, CV=> vti_CountValueL);
GVL_SimitSp.Qb_74 := INT_TO_BYTE(vti_CountValueL);


	
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>